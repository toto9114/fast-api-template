version: "3"
services:
  postgres:
    image: postgres:13
    restart: always
    hostname: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - PGUSER=postgres # docker-compose v2+: pg_isready 시 PGUSER 환경변수 필요.
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgrespw
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../../scripts/docker.entrypoint.init-db.sh:/docker-entrypoint-initdb.d/init.sh
    ports:
      - "127.0.0.1:25000:5432"
    networks:
      - fast-api-template

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    container_name: pgadmin4-dev
    ports:
        - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: password
    volumes:
        - pgadmin-data:/var/lib/pgadmin
    networks:
      - fast-api-template

  redis:
    image: redis:latest
    restart: always
    ports:
      - "127.0.0.1:25100:6379"
    command: redis-server --save ""
    networks:
      - fast-api-template

  backend:
    build:
      context: ../../
    image: fast-api-template/backend
    depends_on:
      postgres:
        condition: service_healthy
    command: backend.entrypoint
    env_file:
      - ${ENV_FILE_PATH}
    ports:
      - "8000:8000"
    networks:
      - fast-api-template

  nginx:
    build:
      context: ../../
    image: fast-api-template/backend
    depends_on:
      backend:
        condition: service_started
    restart: always
    command: backend.nginx
    ports:
      - "8100:8100"
    env_file:
      - ${ENV_FILE_PATH}
    environment:
      NGINX_UVICORN_ADDRESS: "backend:8000"
    networks:
      - fast-api-template

networks:
  fast-api-template:


volumes:
  postgres-data:
  pgadmin-data:
